name: 'Setup OpenGL and Run Commands'
description: 'Installs OpenGL and runs the specified command(s)'
author: 'Your Name'
inputs:
  commands:
    description: 'Command(s) to execute after OpenGL setup'
    required: true
    default: ''
runs:
  using: 'composite'
  steps:
    - name: Setup OpenGL (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq -y
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -y install \
          freeglut3-dev \
          libgl1-mesa-dev \
          libxcursor-dev \
          libpulse-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxv-dev \
          mesa-utils \
          libgl1 \
          libglx-mesa0 \
          mesa-common-dev \
          libglapi-mesa \
          libgbm1 \
          libgl1-mesa-dri \
          libsdl1.2-dev \
          libfreetype6-dev \
          xvfb \
          x11-utils
      shell: bash

    - name: Setup OpenGL (Windows)
      if: runner.os == 'Windows'
      uses: ssciwr/setup-mesa-dist-win@v2

    - name: Setup OpenGL (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS comes with OpenGL support built-in.
        # Optionally install freeglut if your project requires it.
        brew update
        brew install freeglut || echo "freeglut already installed"
        brew install --cask xquartz
        export DYLD_LIBRARY_PATH="$(brew --prefix freeglut)/lib:$DYLD_LIBRARY_PATH"
        open -a XQuartz
        sleep 2
        export DISPLAY=:0
        export LIBGL_ALWAYS_SOFTWARE=1

      shell: bash

    - name: Execute Commands (Linux)
      if: runner.os == 'Linux'
      run: |
        export LIBGL_ALWAYS_SOFTWARE=1
        echo "${{ inputs.commands }}" > /tmp/commands.sh
        chmod +x /tmp/commands.sh
        COMMANDS="bash /tmp/commands.sh"
        echo $COMMANDS
        /usr/bin/xvfb-run -s "-screen 0 2560x1440x24 +extension GLX +extension RENDER" $COMMANDS
      shell: bash

    - name: Execute Commands (Windows)
      if: runner.os == 'Windows'
      run: |
        set LIBGL_ALWAYS_SOFTWARE=1
        ${{ inputs.commands }}
      shell: cmd

    - name: Execute Commands (macOS)
      if: runner.os == 'macOS'
      run: |
        # OpenGL is natively supported on macOS; no virtual framebuffer needed.
        ${{ inputs.commands }}
      shell: bash
